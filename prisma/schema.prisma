// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  canvasBaseUrl   String
  encToken        String   // AES-GCM ciphertext (base64)
  iv              String   // AES-GCM IV (base64)
  settings        UserSettings?
  assignments     Assignment[]
}

model UserSettings {
  id               String   @id @default(cuid())
  userId           String   @unique
  workWindowsJson  String   // JSON: { "1":[["19:00","22:00"]], "2":[...], ... }
  dailyMaxMinutes  Int      @default(180)
  timezone         String   @default("America/New_York")
  useAIEstimates   Boolean  @default(false)
  aiAggressiveness Int      @default(0)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id               String    @id @default(cuid())
  userId           String
  canvasId         Int
  courseId         Int
  courseName       String
  title            String
  htmlUrl          String
  dueAt            DateTime?
  pointsPossible   Float?
  rawDescription   String?
  estimatedMinutes Int?
  strategy         String    @default("even") // even | frontload | backload | custom
  status           String    @default("planned") // planned | in_progress | done
  subtasks         Subtask[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subtask {
  id            String   @id @default(cuid())
  assignmentId  String
  date          DateTime // store as start-of-day in user tz
  minutes       Int
  label         String
  description   String?
  order         Int
  completed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}
